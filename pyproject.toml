[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pearlmind-ml"
version = "2.0.0"
description = "From Mathematical Foundations to Ethical Superintelligence"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Cazandra Aporbo", email = "becaziam@gmail.com"}
]
maintainers = [
    {name = "Cazandra Aporbo", email = "becaziam@gmail.com"}
]
keywords = [
    "machine-learning",
    "deep-learning",
    "ethical-ai",
    "fairness",
    "pytorch",
    "tensorflow",
    "transformers",
    "rag",
    "production-ml"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"

# Core dependencies
dependencies = [
    # Scientific Computing
    "numpy>=1.23.0,<2.0.0",
    "scipy>=1.10.0",
    "pandas>=2.0.0",
    
    # Machine Learning Frameworks
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.1.0",
    "catboost>=1.2",
    
    # Deep Learning (separate pytorch/tensorflow as optional)
    "einops>=0.7.0",
    "timm>=0.9.0",  # PyTorch image models
    
    # NLP and Transformers
    "transformers>=4.35.0",
    "tokenizers>=0.15.0",
    "datasets>=2.15.0",
    "sentence-transformers>=2.2.0",
    
    # Data Processing
    "pillow>=10.0.0",
    "opencv-python>=4.8.0",
    "albumentations>=1.3.0",
    
    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    
    # Model Interpretation
    "shap>=0.43.0",
    "lime>=0.2.0",
    
    # Configuration and Logging
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    
    # API and Serving
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    
    # Utilities
    "tqdm>=4.66.0",
    "joblib>=1.3.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    "omegaconf>=2.3.0",
]

[project.optional-dependencies]
# PyTorch ecosystem
pytorch = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "torchmetrics>=1.2.0",
    "pytorch-lightning>=2.1.0",
]

# TensorFlow ecosystem
tensorflow = [
    "tensorflow>=2.14.0",
    "tensorflow-probability>=0.22.0",
    "tensorflow-addons>=0.22.0",
    "tensorflow-datasets>=4.9.0",
]

# JAX ecosystem (for advanced research)
jax = [
    "jax>=0.4.20",
    "jaxlib>=0.4.20",
    "flax>=0.7.0",
    "optax>=0.1.7",
]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "hypothesis>=6.90.0",
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pylint>=3.0.0",
    "bandit>=1.7.0",  # Security linting
    
    # Pre-commit
    "pre-commit>=3.5.0",
    
    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    
    # Notebooks
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "nbstripout>=0.6.0",
    "nbconvert>=7.9.0",
    
    # Profiling and Debugging
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "snakeviz>=2.2.0",
]

# Experiment tracking
experiment = [
    "mlflow>=2.8.0",
    "wandb>=0.16.0",
    "tensorboard>=2.15.0",
    "dvclive>=3.3.0",
    "optuna>=3.4.0",  # Hyperparameter optimization
    "ray[tune]>=2.8.0",  # Distributed hyperparameter tuning
]

# Production deployment
production = [
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "bentoml>=1.1.0",
    "docker>=6.1.0",
    "kubernetes>=28.1.0",
    "prometheus-client>=0.19.0",
    "grafana-client>=3.6.0",
]

# Fairness and Ethics
fairness = [
    "fairlearn>=0.10.0",
    "aif360>=0.5.0",  # AI Fairness 360
    "aequitas>=2.0.0",  # Bias and fairness audit
]

# Security
security = [
    "adversarial-robustness-toolbox>=1.16.0",
    "foolbox>=3.3.0",
    "cleverhans>=4.0.0",
]

# RAG and Vector Databases
rag = [
    "langchain>=0.0.350",
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.4",  # Use faiss-gpu for GPU support
    "qdrant-client>=1.7.0",
    "pinecone-client>=2.2.0",
]

# All optional dependencies
all = [
    "pearlmind-ml[pytorch,tensorflow,dev,experiment,production,fairness,security,rag]"
]

[project.scripts]
pearlmind = "pearlmind.cli:main"
pearlmind-train = "pearlmind.scripts.train:main"
pearlmind-evaluate = "pearlmind.scripts.evaluate:main"
pearlmind-serve = "pearlmind.scripts.serve:main"
pearlmind-audit = "pearlmind.scripts.fairness_audit:main"

[project.urls]
Homepage = "https://github.com/Cazzy-Aporbo/PearlMind-ML-Journey"
Documentation = "https://github.com/Cazzy-Aporbo/PearlMind-ML-Journey/wiki"
Repository = "https://github.com/Cazzy-Aporbo/PearlMind-ML-Journey"
Issues = "https://github.com/Cazzy-Aporbo/PearlMind-ML-Journey/issues"
Changelog = "https://github.com/Cazzy-Aporbo/PearlMind-ML-Journey/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["pearlmind"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
pearlmind = [
    "configs/*.yaml",
    "configs/*.json",
    "data/*.csv",
    "data/*.json",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/fixtures/.*
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pearlmind",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "gpu: marks tests requiring GPU",
    "fairness: marks fairness audit tests",
    "security: marks security tests",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
namespace_packages = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.coverage.run]
branch = true
source = ["pearlmind"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "coverage_html_report"

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "docs"]
severity = "medium"
confidence = "medium"
max_lines = 500
recursive = true
